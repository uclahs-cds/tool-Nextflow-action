---
name: 'Nextflow tests'

on:
  workflow_call:

# Inspired by https://blog.aspect.dev/github-actions-dynamic-matrix
jobs:
  discover:
    runs-on: ubuntu-latest
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v7
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "test-configuration"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(
              `${process.env.GITHUB_WORKSPACE}/test-config.zip`,
              Buffer.from(download.data)
            );

      - name: 'Unzip artifact'
        run: unzip test-config.zip

      - uses: actions/github-script@v7
        name: Parse configuration
        id: parse-event
        with:
          script: |
            let fs = require('fs');
            let config = JSON.parse(fs.readFileSync('./test-configuration.json'));

            for (const [key, value] of Object.entries(config)) {
              core.setOutput(key, value);
            }

            // Post a pending status on the commit
            await github.rest.repos.createCommitStatus({
               owner: context.repo.owner,
               repo: context.repo.repo,
               sha: config.review_sha,
               state: "pending",
               target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
               description: "Testing started...",
               context: "Nextflow tests",
            });

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.parse-event.outputs.checkout_sha }}

      - id: listfiles
        shell: python
        run: |
          import json
          import os
          from pathlib import Path

          testfiles = [
              str(item) for item in
              Path(".").glob("**/configtest*.json")
          ]
          with open(os.environ.get("GITHUB_OUTPUT"),
                  mode="w", encoding="utf-8") as outfile:
              outfile.write(f"testfiles={json.dumps(testfiles)}\n")
              outfile.write(f"num_tests={json.dumps(bool(testfiles))}\n")

    outputs:
      testfiles: ${{ steps.listfiles.outputs.testfiles }}
      num_tests: ${{ steps.listfiles.outputs.num_tests }}

      apply_fixes: ${{ steps.parse-event.outputs.apply_fixes }}
      checkout_sha: ${{ steps.parse-event.outputs.checkout_sha}}
      review_sha: ${{ steps.parse-event.outputs.review_sha }}
      base_ref: ${{ steps.parse-event.outputs.base_ref }}
      branch_ref: ${{ steps.parse-event.outputs.branch_ref }}
      pr_number: ${{ steps.parse-event.outputs.pr_number }}
      do_summary: ${{ steps.parse-event.outputs.do_summary }}
      last_comment: $ {{ steps.parse-event.outputs.last_comment }}

  run:
    runs-on: ubuntu-latest
    needs: discover
    if: fromJSON(needs.discover.outputs.num_tests)

    strategy:
      fail-fast: false
      matrix:
        testfile: ${{ fromJSON(needs.discover.outputs.testfiles) }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.discover.outputs.checkout_sha }}
          submodules: true

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: dockertest
        run: |
          docker run \
            --rm \
            -e CI \
            -e GITHUB_OUTPUT \
            -v "$GITHUB_OUTPUT:$GITHUB_OUTPUT" \
            -v ${{ github.workspace}}:${{ github.workspace }} \
            -w ${{ github.workspace }} \
            ghcr.io/uclahs-cds/nextflow-config-tests:23.10.0 \
              ${{ github.workspace }} \
              ${{ matrix.testfile }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.dockertest.outputs.archive_key }}
          path: ${{ steps.dockertest.outputs.archive_path }}
        if: ${{ !cancelled() }}

  summary:
    runs-on: ubuntu-latest
    needs: [run, discover]
    if: >
      needs.discover.result == 'success' &&
      !cancelled()

    steps:
      - uses: actions/github-script@v7
        id: status
        name: Determine required steps
        with:
          script: |
            let needs = ${{ toJSON(needs) }}
            let tests_failed = needs.run.result != 'success' &&
              needs.run.result != 'skipped'

            // Post a finalized status on the commit
            let status_details = {
               owner: context.repo.owner,
               repo: context.repo.repo,
               sha: ${{ toJSON(needs.discover.outputs.review_sha) }},
               target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
               context: "Nextflow tests",
            };

            if (tests_failed) {
              status_details.state = "failure";
              status_details.description = "Tests failed!";
            } else {
              status_details.state = "success";
              status_details.description = "Tests passed!";
            }

            await github.rest.repos.createCommitStatus(status_details);

            let should_comment = tests_failed &&
                (needs.discover.outputs.apply_fixes != 'true')

            let should_fix = tests_failed &&
                (needs.discover.outputs.apply_fixes == 'true')

            core.setOutput('tests-failed', tests_failed)
            core.setOutput('should-comment', should_comment)
            core.setOutput('should-fix', should_fix)

            /*
            This needs to be the last step for `push` events. If any tests
            failed, fail now to prevent downstream steps from running.
            */
            if (tests_failed && needs.discover.outputs.do_summary != 'true') {
              core.setFailed("Tests failed for push!");
            }

      - if: steps.status.outputs.tests-failed == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.discover.outputs.checkout_sha }}
          # By default the depth is 1, which only fetches the current commit
          # with no history. Instead fetch all history so we can compare it to
          # the base branch. There doesn't seem to be any middle ground ("get
          # everything between the two commits").
          fetch-depth: 0
          # If we're going to make commits, use a different token
          token: ${{ steps.status.outputs.should-fix == 'true' && secrets.UCLAHS_CDS_REPO_READ_TOKEN || secrets.GITHUB_TOKEN }}

      - if: steps.status.outputs.tests-failed == 'true'
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - if: steps.status.outputs.tests-failed == 'true'
        id: check-fixability
        name: Confirm tests can be fixed
        uses: actions/github-script@v7
        with:
          script: |
            const file_patterns = ['configtest*.json', '**/configtest*.json']

            // Get the list of all changed test files
            const updated_tests = (await exec.getExecOutput(
              'git',
              ['ls-files', '--modified', '--', ...file_patterns],
            )).stdout.trim().split(/\r?\n/)

            let branch_sha = ${{ toJSON(needs.discover.outputs.review_sha) }}

            /*
            If any of those files were changed between the branch tip and the
            merge commit, then they must have been changed in the main branch.
            */
            try {
              await exec.exec('git',
                [
                  'diff-tree',
                  'HEAD',
                  branch_sha,
                  '--exit-code',
                  '--name-status',
                  '--',
                  ...updated_tests
                ]
              )
            } catch (error) {
              let prefix = "This is embarrassing..."

              let last_comment = ${{ toJSON(needs.discover.outputs.last_comment ) }}

              if (last_comment == null || !last_comment.includes(prefix)) {
                let base_ref = ${{ toJSON(needs.discover.outputs.base_ref) }}
                let branch_ref = ${{ toJSON(needs.discover.outputs.branch_ref) }}

                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: ${{ toJSON(needs.discover.outputs.pr_number) }},
                  body: `*Bleep bloop, I am a robot.*

            ${prefix} the \`${ base_ref }\` branch has test changes that haven't been merged into _this_ branch, and I can't handle that. Please fix that and then I can fix the tests for you!

            \`\`\`console
            cd /path/to/your/repository/
            git checkout ${ branch_ref }
            git fetch origin
            git merge origin/${ base_ref }
            git push origin
            \`\`\``
                });
              } else {
                console.log("Still need to merge, no change");
              }

              core.setFailed("Need to merge tests");
            }

      - if: steps.status.outputs.should-fix == 'true'
        id: pushchanges
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Autofix Nextflow configuration regression tests
          branch: ${{ needs.discover.outputs.branch_ref }}
          file_pattern: '**/configtest*.json'

      - if: steps.status.outputs.should-fix == 'true'
        name: Add comment about reviewing
        uses: actions/github-script@v7
        with:
          script: |
            const timers = require('node:timers/promises')

            let commit_id = ${{ toJSON(steps.pushchanges.outputs.commit_hash) }}

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ toJSON(needs.discover.outputs.pr_number) }},
              body: `*Bleep bloop, I am a robot.*

            I have updated all of the failing tests for you with ${ commit_id }. You must review my work before merging this pull request!`
            });

      - if: ${{ steps.status.outputs.should-comment == 'true' }}
        id: createreview
        name: Post review
        uses: actions/github-script@v7
        with:
          script: |
            const fsPromises = require('fs/promises')

            // Get the list of all annotation files
            const annotation_files = (await exec.getExecOutput(
              'git',
              ['ls-files', '--others', '--exclude-standard', '--', '*.prnote'],
            )).stdout.trim().split(/\r?\n/)

            let prefix = "Alas, some of the Nextflow configuration tests failed"

            let last_comment = ${{ toJSON(needs.discover.outputs.last_comment) }};

            if (last_comment == null || !last_comment.includes(prefix)) {
              let body = `*Bleep bloop, I am a robot.*\n\n${ prefix }!`

              const notes = await Promise.all(annotation_files.map(filename =>
                fsPromises.readFile(filename, {encoding: 'utf-8'})
              ))

              let suffix = `If the above changes are surprising, **stop** and determine what happened.

            If the above changes are expected, there are two ways to fix this:

            1. **Automatically**: Post a comment starting with "/fix-tests" (without the quotes) and I will update the tests for you (you must review my work afterwards).
            2. **Manually**: Follow [these steps](https://uclahs-cds.atlassian.net/wiki/spaces/BOUTROSLAB/pages/254115842/Nextflow+Configuration+Regression+Tests#Resolving-Pull-Request-Check-Failures) on Confluence.`

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ toJSON(needs.discover.outputs.pr_number) }},
                body: [body, ...notes, suffix].join("\n")
              })
            } else {
              console.log("Still can't fix anything")
            }

            // Make sure the job fails regardless
            core.setFailed('Tests failed!')
