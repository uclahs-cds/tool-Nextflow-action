---
name: 'Nextflow tests'

on:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.sha }}
  cancel-in-progress: true

# Inspired by https://blog.aspect.dev/github-actions-dynamic-matrix
jobs:
  discover:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - id: listfiles
        shell: python
        run: |
          import json
          import os
          from pathlib import Path

          testfiles = [
              str(item) for item in
              Path(".").glob("**/configtest*.json")
          ]
          with open(os.environ.get("GITHUB_OUTPUT"),
                  mode="w", encoding="utf-8") as outfile:
              outfile.write(f"testfiles={json.dumps(testfiles)}\n")
              outfile.write(f"num_tests={json.dumps(bool(testfiles))}\n")

    outputs:
      testfiles: ${{ steps.listfiles.outputs.testfiles }}
      num_tests: ${{ steps.listfiles.outputs.num_tests }}

  run:
    runs-on: ubuntu-latest
    needs: discover
    if: ${{ fromJSON(needs.discover.outputs.num_tests) }}

    strategy:
      fail-fast: false
      matrix:
        testfile: ${{ fromJSON(needs.discover.outputs.testfiles) }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: dockertest
        run: |
          docker run \
            --rm \
            -e CI \
            -e GITHUB_OUTPUT \
            -v "$GITHUB_OUTPUT:$GITHUB_OUTPUT" \
            -v ${{ github.workspace}}:${{ github.workspace }} \
            -w ${{ github.workspace }} \
            ghcr.io/uclahs-cds/nextflow-config-tests:autofix-dev \
              ${{ github.workspace }} \
              ${{ matrix.testfile }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.dockertest.outputs.archive_key }}
          path: ${{ steps.dockertest.outputs.archive_path }}
        if: ${{ !cancelled() }}

  summary:
    runs-on: ubuntu-latest
    needs: run
    if: ${{ !cancelled() }}

    steps:
      - uses: actions/github-script@v7
        id: status
        name: Determine required steps
        with:
          script: |
            var needs = ${{ toJSON(needs) }}
            var should_act = needs.run.result != 'success' &&
              needs.run.result != 'skipped' &&
              context.eventName == 'pull_request'

            core.setOutput('should-act', should_act)

      - if: ${{ steps.status.outputs.should-act == 'true' }}
        uses: actions/checkout@v4
        with:
          # By default the depth is 1, which only fetches the current commit
          # with no history. Instead fetch all history so we can compare it to
          # the base branch. There doesn't seem to be any middle ground ("get
          # everything between the two commits").
          fetch-depth: 0

      - if: ${{ steps.status.outputs.should-act == 'true' }}
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - if: ${{ steps.status.outputs.should-act == 'true' }}
        id: annotations
        name: Create annotations
        shell: python
        run: |
          import itertools
          import json
          import os
          import re
          import subprocess

          def batched(iterable, num):
              "Copied from docs for python3.12"
              # batched('ABCDEFG', 3) -> ABC DEF G
              if num < 1:
                  raise ValueError('n must be at least one')
              subiter = iter(iterable)
              while batch := tuple(itertools.islice(subiter, num)):
                  yield batch

          diff_header = re.compile(r"""
              diff\s
              --git\s
              a/(?P<from>\S+)\s
              b/(?P<to>\S+)\n
              index.+\n
              ---.+\n
              \+\+\+.+\n
              """, re.VERBOSE)

          diff_chunk = re.compile(r"@@ -(\d+),(\d+) \+(\d+),(\d+) @@\n")

          diff_output = subprocess.run(
              ["git", "diff"],
              capture_output=True,
              check=True
          ).stdout.strip().decode("utf-8")

          file_chunks = diff_header.split(diff_output)
          assert len(file_chunks[0]) == 0

          file_chunks.pop(0)

          assert len(file_chunks) % 3 == 0

          annotations = []

          for batch in batched(file_chunks, 3):
              assert batch[0] == batch[1]
              filename = batch[0]

              diff_chunks = diff_chunk.split(batch[2])

              assert len(diff_chunks[0]) == 0
              diff_chunks.pop(0)
              assert len(diff_chunks) % 5 == 0

              for diff_batch in batched(diff_chunks, 5):
                  from_line, from_length, to_line, to_length, diff = diff_batch

                  annotations.append({
                      "path": filename,
                      "start_line": int(from_line),
                      "end_line": int(from_line) + int(from_length) - 1,
                      "annotation_level": "failure",
                      "message": "```suggestion\n" + diff + "\n```"
                  })

          with open(os.environ.get("GITHUB_OUTPUT"),
                  mode="w", encoding="utf-8") as outfile:
              outfile.write(f"annotations={json.dumps(annotations)}\n")

      - uses: actions/github-script@v7
        name: Create check
        if: ${{ steps.status.outputs.should-act == 'true' }}
        with:
          script: |
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Test Fixes',
              head_sha: '${{ github.event.pull_request.head.sha }}',
              status: 'completed',
              conclusion: 'failure',
              output: {
                title: 'Results',
                summary: 'This is the summary',
                text: 'This is the _text_',
                annotations: ${{ steps.annotations.outputs.annotations }}
              },
              actions: [{
                label: 'LaBeL',
                description: 'Do a thing from the desc',
                identifier: 'identifier-twelve'
              }]
            })
